---
import data from '../data.json'
import Layout from 'virtual:components/Layout'
import Usage from 'virtual:components/Usage'
import { isDefined } from  '../helpers/isDefined'
import type { AstroProps } from '../../types/types'

export async function getStaticPaths() {
  return data
}

type Props = AstroProps;

const { component, navigation, usage } = Astro.props;
const { attributes, slots, cssProperties, cssParts, events } = component
---
<Layout component={component} usage={usage} navigation={navigation}>
  <p>
    {component.summary}
  </p>
  
  {Boolean(usage.usages.length) && (
    <Usage component={component} usage={usage} navigation={navigation} />
  )}  

  {isDefined(attributes) && (
    <h2>Attributes</h2>
    <div class="overflow-auto">
      <table>
        <thead>
          <th scope="col">Name</th>
          <th scope="col">Type</th>
          <th scope="col">Description</th>
        </thead>
        <tbody>
        {attributes.map((attribute) => {
          return <tr>
            <th scope="row">{attribute.name}</th>
            <td>{attribute.type?.text ?? 'string'}</td>
            <td>{attribute.description ?? '-'}</td>
          </tr>
        })}
      </tbody>
    </table>
  </div>
  )}

  {isDefined(slots) && (
    <h2>Slots</h2>
    <div class="overflow-auto">
      <table>
        <thead>
          <th scope="col">Name</th>
          <th scope="col">Description</th>
        </thead>
        <tbody>
        {slots.map((slot) => {
          return <tr>
            <th scope="row">{slot.name || "(default)"}</th>
            <td>{slot.description ?? '-'}</td>
          </tr>
        })}
      </tbody>
    </table>
  </div>
  )}

  {isDefined(cssProperties) && (
    <h2>CSS Properties</h2>
    <div class="overflow-auto">
      <table>
        <thead>
          <th scope="col">Name</th>
          <th scope="col">Description</th>
        </thead>
        <tbody>
        {cssProperties.map((property) => {
          return <tr>
            <th scope="row">{property.name}</th>
            <td>{property.description ?? '-'}</td>
          </tr>
        })}
      </tbody>
    </table>
  </div>
  )}

  {isDefined(cssParts) && (
    <h2>CSS Parts</h2>
    <div class="overflow-auto">
      <table>
        <thead>
          <th scope="col">Name</th>
          <th scope="col">Description</th>
        </thead>
        <tbody>
          {cssParts.map((part) => {
            return <tr>
              <th scope="row">{part.name}</th>
              <td>{part.description ?? '-'}</td>
            </tr>
          })}
        </tbody>
      </table>
    </div>
  )}

  {isDefined(events) && (
    <h2>Events</h2>
    <div class="overflow-auto">
      <table>
        <thead>
          <th scope="col">Name</th>
          <th scope="col">Description</th>
        </thead>
        <tbody>
          {events.map((event) => {
            return <tr>
              <th scope="row">{event.name}</th>
              <td>{event.description ?? '-'}</td>
            </tr>
          })}
        </tbody>
      </table>
    </div>
  )}
</Layout>
  
